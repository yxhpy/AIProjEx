---
description: 
globs: 
alwaysApply: true
---
# 项目管理
- 使用github issues统一管理项目进度
- 开始编写代码前使用issues获取最新进度和代办
- 编写代码完成后及时提交代码，并将进度和计划汇报到issues
- 项目中重复出现的错误，需要汇总到 docs/coding-guidelines.md，防止反复出现类似错误

# 编写代码
- 编码前必须阅读项目根目录的 README.md
- 编写代码前必须阅读 docs/coding-guidelines.md 防止重复出现之前存在的错误
- 解决bug或者造轮子前搜索一下是否有现成的
- 架构应用或者需要安装包时 请务必使用check相关工具，查询版本后再搭建项目
- 图片推荐使用 pixabay、pexels等免版权图片
- 完成前端页面时必须参考之前页面并且使用 21st 工具完成
- 为方便代码搜索管理编写代码时严格进行注释和命名

# 项目依赖服务、测试部署等
- 使用 docker 命令行管理数据，注意容器命名必须和项目相关
- 名称：项目名称 + 依赖名称 如：proejct_mysql

# 测试
- 测试前先使用命令行确认程序是否已经在运行了，如果已经运行直接开始测试即可
- 每次创建或者修改代码后，如果项目提供前端你可以使用 playwright 自行完成界面、功能的测试、如果功能无法使用请查看控制台日志，自行解决。
- 每次启动项目前，一定确认项目是否已经运行起来了，防止重复运行。

# 使用  github 相关工具
```
create_or_update_file
search_repositories
create_repository
get_file_contents
push_files
create_issue
create_pull_request
fork_repository
create_branch
list_commits
list_issues
update_issue
add_issue_comment
search_code
search_issues
search_users
get_issue
```
